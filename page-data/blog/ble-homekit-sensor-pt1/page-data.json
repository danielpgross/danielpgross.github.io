{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/blog/ble-homekit-sensor-pt1","result":{"data":{"post":{"__typename":"MdxPost","slug":"/blog/ble-homekit-sensor-pt1","title":"Building a battery-powered wireless sensor using Bluetooth Low-Energy (BLE) and Apple HomeKit (Part 1)","date":"2017-05-25","tags":[{"name":"hardware","slug":"hardware"},{"name":"software","slug":"software"},{"name":"internet-of-things","slug":"internet-of-things"},{"name":"bluetooth-low-energy","slug":"bluetooth-low-energy"},{"name":"arduino","slug":"arduino"},{"name":"c","slug":"c"},{"name":"homekit","slug":"homekit"},{"name":"nrf52832","slug":"nrf-52832"}],"description":null,"canonicalUrl":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Building a battery-powered wireless sensor using Bluetooth Low-Energy (BLE) and Apple HomeKit (Part 1)\",\n  \"date\": \"2017-05-25T00:00:00.000Z\",\n  \"slug\": \"/blog/ble-homekit-sensor-pt1\",\n  \"tags\": [\"hardware\", \"software\", \"internet-of-things\", \"bluetooth-low-energy\", \"arduino\", \"c\", \"homekit\", \"nrf52832\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In this series, we'll look at building a simple wireless temperature and humidity sensor using inexpensive components and Bluetooth Low Energy (BLE) for communication. We'll read off the sensor values using the Home app from an iOS device.\"), mdx(\"h2\", null, \"Motivation\"), mdx(\"p\", null, \"This project originally started when I got a new humidifier at home and wanted an easy way to tell when the humidity levels were too low. After searching in vain for an inexpensive HomeKit-compatible sensor, I decided to see if I could build one myself from cheap components.\"), mdx(\"p\", null, \"I wanted my sensor to:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Have a low cost to build\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Have low power consumption, be capable of running from a few AA batteries for ~1 year (or at least a few months)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Transmit sensor values that could be easily viewed from my smartphone\")), mdx(\"p\", null, \"After some brief research, I chose \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Bluetooth Low Energy (BLE)\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Apple HomeKit\"), \" as the 2 basic implementation technologies for this project.\"), mdx(\"h3\", null, \"Why HomeKit?\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.apple.com/homekit/\"\n  }), \"HomeKit\"), \" is a relatively new (2014) framework developed by Apple to enable advanced, centralized home-automation control with tight integration inside the iOS ecosystem. HomeKit is making it easy for ordinary, non-technical people to set up elaborate home automation schemes, with an intuitive control interface (the iOS Home app), preset device state collections called \\\"scenes\\\", and voice control (via Siri).\"), mdx(\"p\", null, \"Some people might be surprised to learn that home automation has actually been around for decades, and there have been \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/X10_%28industry_standard%29\"\n  }), \"comprehensive wireless control system\"), \"s since the mid-1970s. There is an entire market of controllers, switches and \\\"smart\\\" (dumb by today's standards) devices that existed long before HomeKit or even the first iPhone.\"), mdx(\"p\", null, \"So why does it seem that only now are we starting to hear about the smart home revolution? I think it's for the same reason that it wasn't until the mid-1980s that we didn't hear about the personal computer revolution. Like it has with many technologies before, Apple is bringing smart home device technology out of the realm of engineers, academics, and basement-dwelling geeks and into the hands of ordinary non-technical folk. Apple has a knack for making complex technical systems accessible through simple, intuitive interfaces. With this combination of user-friendliness and tight Apple ecosystem integration (e.g. \\\"Siri, turn on the light\\\"), I think HomeKit is poised to bring home automation into the mainstream at greater proportions than ever before.\"), mdx(\"p\", null, \"Considering all that, HomeKit is a technology that I was eager to start playing with and learning about.\"), mdx(\"h3\", null, \"Why Bluetooth Low Energy?\"), mdx(\"p\", null, \"Bluetooth Low Energy (BLE) is an open wireless data transmission standard that was introduced by Nokia in the late 2000s, offering near-range communication at low throughput rates (~0.3Mbit/s), with very low power requirements (in the 0.01 - 0.5W range). \"), mdx(\"p\", null, \"Since the introduction of the BLE standard, the market has seen a flood of new BLE-compatible devices. The inclusion of BLE in smartphones, notably the iPhone (since the 4S model), has encouraged wireless peripheral manufacturers to utilize BLE, and this in turn has induced further proliferation of BLE-capable hub devices. A \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.abiresearch.com/press/bluetooth-low-energy-devices-account-27-total-blue/\"\n  }), \"report by ABI Research\"), \" forecasts growth of Bluetooth Low Energy device production by 34% between 2016 and 2021, with BLE devices comprising 27% of total Bluetooth shipments by 2021.\"), mdx(\"p\", null, \"BLE's power characteristics make it an excellent candidate technology for data transmission in this project. Although there are other technologies we could have used here instead, for example \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/Zigbee\"\n  }), \"ZigBee\"), \" or \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/ANT_(network)\"\n  }), \"ANT\"), \", I was most interested to get to know the mechanics of BLE because of its prevalence in the marketplace and its expected growth in the years to come.\"), mdx(\"h2\", null, \"Solutions\"), mdx(\"p\", null, \"HomeKit is a closed, proprietary protocol developed solely by Apple. Its specifications are only available to Apple MFi program members. I'm not an MFi program member and don't have access to those specifications, so we won't go into much detail here about the HomeKit protocol.\"), mdx(\"p\", null, \"HomeKit fundamentally operates over 2 network protocols: \"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"IP (over a wired or wireless LAN)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Bluetooth Low Energy (BLE)\")), mdx(\"p\", null, \"The de-facto standard software implementation of HomeKit Accessory Protocol (HAP) is the closed-source OberonHAP software developed by \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://oberonhap.com/products/\"\n  }), \"Oberon\"), \". Although I haven't worked with it myself, according to Oberon it is the best implementation available, performing a few times faster and consuming less memory than any alternative implementation.\"), mdx(\"p\", null, \"Luckily, for hobbyists like myself, there are a number of reasonably high-quality open-source HAP implementations. I've listed some of them below:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Project\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Network type\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Language\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"a\", _extends({\n    parentName: \"td\"\n  }, {\n    \"href\": \"https://github.com/KhaosT/HAP-NodeJS\"\n  }), \"KhaosT/HAP-NodeJS\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"IP\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Javascript (node.js)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"a\", _extends({\n    parentName: \"td\"\n  }, {\n    \"href\": \"https://github.com/brutella/hc\"\n  }), \"brutella/hc\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"IP\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Golang\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"a\", _extends({\n    parentName: \"td\"\n  }, {\n    \"href\": \"https://github.com/beowulfe/HAP-Java\"\n  }), \"beowulfe/HAP-Java\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"IP\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Java\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"a\", _extends({\n    parentName: \"td\"\n  }, {\n    \"href\": \"https://github.com/etwmc/Personal-HomeKit-HAP\"\n  }), \"etwmc/Personal-HomeKit-HAP\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"IP\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"C++\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"a\", _extends({\n    parentName: \"td\"\n  }, {\n    \"href\": \"https://github.com/Bouke/HAP\"\n  }), \"Bouke/HAP\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"IP\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Swift\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"a\", _extends({\n    parentName: \"td\"\n  }, {\n    \"href\": \"https://github.com/aanon4/HomeKit\"\n  }), \"aanon4/HomeKit\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"BLE\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"C++\")))), mdx(\"p\", null, \"Of those projects, the IP-based implementations are the most mature, by far.\"), mdx(\"h3\", null, \"Network topologies\"), mdx(\"p\", null, \"Next, I needed to decide how the sensor values would be read using a smartphone. I considered a few network topologies (arrangements of the devices in a network):\"), mdx(\"h4\", null, \"Option 1: Arduino-based dumb sensor + wifi-connected bridge\"), mdx(\"p\", null, \"This option made sense because I already had an Arduino Uno, and I knew that Arduino-compatible BLE transceivers could be had for relatively cheap.\"), mdx(\"img\", {\n    src: option1\n  }), mdx(\"h5\", null, mdx(\"em\", {\n    parentName: \"h5\"\n  }, \"Evaluating Option 1\")), mdx(\"p\", null, \"One of the first things I did was to estimate the sensor's power consumption in this arrangement. Even in a low-power configuration, an \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.gammon.com.au/power\"\n  }), \"Arduino Uno draws about \", mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"35mA\"), \" at idle\"), \". With 3 \\xD7 2500mAh batteries, this would only yield us \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"~1 week of battery life\"), \", without even considering that current would also be drawn by the BLE module and sensor. This is far from satisfying our requirement of running on batteries for at least a few months, so I was back to the drawing board.\"), mdx(\"p\", null, \"I began to look into \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.arduino.cc/en/Main/arduinoBoardNano\"\n  }), \"Arduino Nano\"), \" and even using a bare ATmega328 in an attempt to reduce power consumption. It was at this point that I discovered the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.nordicsemi.com/eng/Products/Bluetooth-low-energy/nRF52832\"\n  }), \"Nordic Semiconductor nRF52832 SoC\"), \" with an integrated BLE transceiver, with an operating current draw of about \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"50\\u03BCA\"), \" \\u2014 3 orders of magnitude smaller than the Uno! This was a major breakthrough, since the nRF5 was capable of replacing the Arduino + BLE module combination, in a smaller package, with lower power consumption, and at a low cost. \", \"[In the next blog post, I'll discuss the nRF5 in more detail]\", \". So I moved on to the next option, based on the nRF5.\"), mdx(\"h4\", null, \"Option 2: nRF-based smart sensor\"), mdx(\"p\", null, \"With the next solution, I attempted to simplify the system as much as possible. Having eliminated the need for a separate microcontroller (the Arduino), I wondered if I could also remove the need for a separate HomeKit BLE-to-WiFi bridge.\"), mdx(\"img\", {\n    src: option2\n  }), mdx(\"h5\", null, mdx(\"em\", {\n    parentName: \"h5\"\n  }, \"Evaluating Option 2\")), mdx(\"p\", null, \"The major issue blocking this route turned out to be an issue of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"software\"), \", i.e. the absence of a mature open-source implementation of HAP over BLE. As shown in the table above, I only found a single BLE HAP server: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/aanon4/HomeKit\"\n  }), \"aanon4/HomeKit\"), \". Unfortunately, at the time of writing, it is immature, poorly documented, unmaintained, and written in C. For a hobbyist like myself, debugging issues with C code running on the nRF5 would be a significant challenge and time commitment. Therefore, this option was a no-go.\"), mdx(\"p\", null, \"It's worth noting, though, that this is not a fundamental flaw in this topology. If this were a real product, OberonHAP could probably be used to implement HAP over BLE quite easily.\"), mdx(\"h4\", null, \"Option 3: nRF-based dumb sensor + wifi-connected bridge\"), mdx(\"p\", null, \"The final option was a combination of Option 1 and Option 2; I simply added the HAP WiFi bridge from Option 1 back into the topology of Option 2.\"), mdx(\"img\", {\n    src: option3\n  }), mdx(\"h5\", null, mdx(\"em\", {\n    parentName: \"h5\"\n  }, \"Evaluating Option 3\")), mdx(\"p\", null, \"With this option, I was able to maintain the improved sensor power consumption characteristics from Option 2, while overcoming the HAP server software roadblock. This option seemed to finally be a path to a viable solution. Success!\"), mdx(\"h2\", null, \"Conclusion and Next Steps\"), mdx(\"p\", null, \"Having chosen a workable high-level design and network topology, the next steps were to:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Implement BLE sensor value broadcasting on the nRF5\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Implement a BLE \\u27F7 HAP-over-IP sensor bridge\")), mdx(\"p\", null, \"In the next post, I'll discuss the hardware used in this project, and we'll get into the BLE sensor broadcasting implementation.\"), mdx(\"h5\", null, \"See what happens next in \", mdx(\"a\", _extends({\n    parentName: \"h5\"\n  }, {\n    \"href\": \"/blog/ble-homekit-sensor-pt2\"\n  }), \"Part 2\"), \"!\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"In this series, we'll look at building a simple wireless temperature and humidity sensor using inexpensive components and Bluetooth Low…","timeToRead":5,"banner":null}},"pageContext":{"slug":"/blog/ble-homekit-sensor-pt1","formatString":"YYYY-MM-DD"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}